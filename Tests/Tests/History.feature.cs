// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Tests.Tests
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("History")]
    public partial class HistoryFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "History.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Tests", "History", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 3
#line hidden
#line 4
 testRunner.Given("Setting have default values", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 5
  testRunner.And("History is cleared", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Clear history")]
        public virtual void ClearHistory()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Clear history", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 7
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                            "Amount",
                            "%",
                            "Term"});
                table1.AddRow(new string[] {
                            "1000",
                            "10",
                            "100"});
                table1.AddRow(new string[] {
                            "1000",
                            "20",
                            "50"});
#line 8
 testRunner.Given("I have history data:", ((string)(null)), table1, "Given ");
#line hidden
#line 12
 testRunner.When("I open History page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 13
  testRunner.And("I clear the history", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                            "Amount",
                            "%",
                            "Term",
                            "Year",
                            "From",
                            "To",
                            "Interest",
                            "Income"});
#line 14
 testRunner.Then("the History is:", ((string)(null)), table2, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("History table")]
        public virtual void HistoryTable()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("History table", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 17
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                            "Amount",
                            "%",
                            "Term",
                            "Fin Year",
                            "Start Date"});
                table3.AddRow(new string[] {
                            "1000",
                            "10",
                            "100",
                            "360",
                            "2022/01/10"});
                table3.AddRow(new string[] {
                            "1000",
                            "20",
                            "50",
                            "365",
                            "2022/05/15"});
#line 18
 testRunner.Given("I have history data:", ((string)(null)), table3, "Given ");
#line hidden
#line 22
 testRunner.When("I open History page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                            "Amount",
                            "%",
                            "Term",
                            "Year",
                            "From",
                            "To",
                            "Interest",
                            "Income"});
                table4.AddRow(new string[] {
                            "1000",
                            "20%",
                            "50",
                            "365",
                            "15/05/2022",
                            "04/07/2022",
                            "27.40",
                            "1,027.40"});
                table4.AddRow(new string[] {
                            "1000",
                            "10%",
                            "100",
                            "360",
                            "10/01/2022",
                            "20/04/2022",
                            "27.78",
                            "1,027.78"});
#line 23
 testRunner.Then("the History is:", ((string)(null)), table4, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("History shows last 9 rows")]
        public virtual void HistoryShowsLast9Rows()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("History shows last 9 rows", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 28
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                            "Amount",
                            "%",
                            "Term",
                            "Fin Year",
                            "Start Date"});
                table5.AddRow(new string[] {
                            "1001",
                            "1",
                            "101",
                            "360",
                            "2022/01/01"});
                table5.AddRow(new string[] {
                            "1002",
                            "2",
                            "102",
                            "365",
                            "2022/05/02"});
                table5.AddRow(new string[] {
                            "1003",
                            "3",
                            "103",
                            "360",
                            "2022/01/03"});
                table5.AddRow(new string[] {
                            "1004",
                            "4",
                            "104",
                            "365",
                            "2022/05/04"});
                table5.AddRow(new string[] {
                            "1005",
                            "5",
                            "105",
                            "360",
                            "2022/01/05"});
                table5.AddRow(new string[] {
                            "1006",
                            "6",
                            "106",
                            "365",
                            "2022/05/06"});
                table5.AddRow(new string[] {
                            "1007",
                            "7",
                            "107",
                            "360",
                            "2022/01/07"});
                table5.AddRow(new string[] {
                            "1008",
                            "8",
                            "108",
                            "365",
                            "2022/05/08"});
                table5.AddRow(new string[] {
                            "1009",
                            "9",
                            "109",
                            "360",
                            "2022/01/09"});
                table5.AddRow(new string[] {
                            "1010",
                            "10",
                            "110",
                            "365",
                            "2022/05/10"});
                table5.AddRow(new string[] {
                            "1011",
                            "11",
                            "111",
                            "360",
                            "2022/01/11"});
                table5.AddRow(new string[] {
                            "1012",
                            "12",
                            "112",
                            "365",
                            "2022/05/12"});
#line 29
 testRunner.Given("I have history data:", ((string)(null)), table5, "Given ");
#line hidden
#line 43
 testRunner.When("I open History page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                            "Amount",
                            "%",
                            "Term",
                            "Year",
                            "From",
                            "To",
                            "Interest",
                            "Income"});
                table6.AddRow(new string[] {
                            "1012",
                            "12%",
                            "112",
                            "365",
                            "12/05/2022",
                            "01/09/2022",
                            "37.26",
                            "1,049.26"});
                table6.AddRow(new string[] {
                            "1011",
                            "11%",
                            "111",
                            "360",
                            "11/01/2022",
                            "02/05/2022",
                            "34.29",
                            "1,045.29"});
                table6.AddRow(new string[] {
                            "1010",
                            "10%",
                            "110",
                            "365",
                            "10/05/2022",
                            "28/08/2022",
                            "30.44",
                            "1,040.44"});
                table6.AddRow(new string[] {
                            "1009",
                            "9%",
                            "109",
                            "360",
                            "09/01/2022",
                            "28/04/2022",
                            "27.50",
                            "1,036.50"});
                table6.AddRow(new string[] {
                            "1008",
                            "8%",
                            "108",
                            "365",
                            "08/05/2022",
                            "24/08/2022",
                            "23.86",
                            "1,031.86"});
                table6.AddRow(new string[] {
                            "1007",
                            "7%",
                            "107",
                            "360",
                            "07/01/2022",
                            "24/04/2022",
                            "20.95",
                            "1,027.95"});
                table6.AddRow(new string[] {
                            "1006",
                            "6%",
                            "106",
                            "365",
                            "06/05/2022",
                            "20/08/2022",
                            "17.53",
                            "1,023.53"});
                table6.AddRow(new string[] {
                            "1005",
                            "5%",
                            "105",
                            "360",
                            "05/01/2022",
                            "20/04/2022",
                            "14.66",
                            "1,019.66"});
                table6.AddRow(new string[] {
                            "1004",
                            "4%",
                            "104",
                            "365",
                            "04/05/2022",
                            "16/08/2022",
                            "11.44",
                            "1,015.44"});
#line 44
 testRunner.Then("the History is:", ((string)(null)), table6, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("History respect settings")]
        [NUnit.Framework.TestCaseAttribute("$ - US dollar", "123.456.789,00", "dd-MM-yyyy", "10-01-2022", "05-11-2022", "82.225,00", "182.225,00", null)]
        [NUnit.Framework.TestCaseAttribute("€ - euro", "123 456 789.00", "MM/dd/yyyy", "01/10/2022", "11/05/2022", "82 225.00", "182 225.00", null)]
        [NUnit.Framework.TestCaseAttribute("£ - Great Britain Pound", "123 456 789,00", "MM dd yyyy", "01 10 2022", "11 05 2022", "82 225,00", "182 225,00", null)]
        public virtual void HistoryRespectSettings(string currency, string numberFormat, string dateFormat, string from, string to, string interest, string income, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("currency", currency);
            argumentsOfScenario.Add("number format", numberFormat);
            argumentsOfScenario.Add("date format", dateFormat);
            argumentsOfScenario.Add("from", from);
            argumentsOfScenario.Add("to", to);
            argumentsOfScenario.Add("interest", interest);
            argumentsOfScenario.Add("income", income);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("History respect settings", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 56
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 57
 testRunner.Given(string.Format("I update settings: \'{0}\', \'{1}\', \'{2}\'", numberFormat, dateFormat, currency), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                            "Amount",
                            "%",
                            "Term",
                            "Fin Year",
                            "Start Date"});
                table7.AddRow(new string[] {
                            "100000",
                            "99",
                            "299",
                            "360",
                            "2022/01/10"});
#line 58
  testRunner.And("I have history data:", ((string)(null)), table7, "And ");
#line hidden
#line 61
 testRunner.When("I open History page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                            "Amount",
                            "%",
                            "Term",
                            "Year",
                            "From",
                            "To",
                            "Interest",
                            "Income"});
                table8.AddRow(new string[] {
                            "100000",
                            "99%",
                            "299",
                            "360",
                            string.Format("{0}", from),
                            string.Format("{0}", to),
                            string.Format("{0}", interest),
                            string.Format("{0}", income)});
#line 62
 testRunner.Then("the History is:", ((string)(null)), table8, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
